<?php
// $Id$

function services_oauth_install() {
  drupal_install_schema('services_oauth');
}

function services_oauth_uninstall() {
  drupal_uninstall_schema('services_oauth');
}

function services_oauth_schema() {
  $schema = array();

  $schema['services_oauth_consumer'] = array(
    'description' => t('Consumer keys for users that can consume services.'),
    'fields' => array(
      'consumer_key' => array(
        'description' => t('Consumer key allow the user to contact the services API as an external application.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE
      ),
      'consumer_secret' => array(
        'description' => t('Consumer key "password".'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE
      ),
      'uid' => array(
        'description' => t('The application owner.'),
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE
      ),
      'name' => array(
        'description' => t('The application name.'),
        'type'        => 'varchar',
        'length'      => 128,
        'not null'    => TRUE
      ),
      'type' => array(
        'description' => t('The application type.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE,
      ),
    ),
    'primary key' => array('consumer_key'),
    'index' => array(
      'user' => array('uid'),
    ),
  );
  $schema['services_oauth_token'] = array(
    'description' => t('Tokens for request and services accesses.'),
    'fields' => array(
      'token_key' => array(
        'description' => t('Tokens for request and services accesses.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE
      ),
      'token_secret' => array(
        'description' => t('Token "password".'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE
      ),
      'type' => array(
        'description' => t('Type of the token: request or access.'),
        'type'        => 'varchar',
        'length'      => 7,
        'not null'    => TRUE
      ),
      'uid' => array(
        'description' => t('User ID from {user}.uid.'),
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE
      ),
      'consumer_key' => array(
        'description' => t('Consumer key from {oauth_consumer}.consumer_key.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE
      ),
      'services' => array(
        'description' => t('An array of services that the user allowed the consumer to access.'),
        'type'        => 'text',
      ),
      'authorized' => array(
        'description' => t('In case its a request token, it checks if the user already authorized him to get an access token.'),
        'type'        => 'int',
        'size'        => 'tiny',
        'default'     => 0
      ),
    ),
   'primary key' => array('token_key'),
   'indexes' => array(
      'token_key_type' => array('token_key', 'type'),
    ),
  );
  $schema['services_oauth_nonce'] = array(
    'description' => t('Stores timestamp against nonce for repeat attacks.'),
    'fields' => array(
      'nonce' => array(
        'description' => t('The random 32 characters long string used on each request.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE
      ),
      'timestamp' => array(
        'description' => t('The timestamp of the request.'),
        'type'        => 'int',
        'not null'    => TRUE
      ),
      'token' => array(
        'description' => t('Tokens for request and services accesses.'),
        'type'        => 'varchar',
        'length'      => 32
      ),
    ),
    'primary key' => array('nonce'),
    'indexes' => array(
      'timestamp' => array('timestamp'),
    ),
  );
  return $schema;

  return $schema;
}