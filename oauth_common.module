<?php

/**
 * Implementation hook_autoload_info().
 */
function oauth_common_autoload_info() {
  $lib = array('file' => 'lib/OAuth.php');

  return array(
    'DrupalOAuthServer'         => array('file' => 'includes/DrupalOAuthServer.inc'),
    'DrupalOAuthDataStore'      => array('file' => 'includes/DrupalOAuthDataStore.inc'),
    'DrupalOAuthRequest'        => array('file' => 'includes/DrupalOAuthRequest.inc'),
    'DrupalOAuthToken'          => array('file' => 'includes/DrupalOAuthToken.inc'),
    'DrupalOAuthConsumerToken'  => array('file' => 'includes/DrupalOAuthConsumerToken.inc'),
    'DrupalOAuthConsumer'       => array('file' => 'includes/DrupalOAuthConsumer.inc'),
    'OAuthSignatureMethod_HMAC' => array('file' => 'includes/OAuthSignatureMethod_HMAC.inc'),
    'OAuthServer'     => $lib,
    'OAuthDataStore'  => $lib,
    'OAuthRequest'    => $lib,
    'OAuthConsumer'   => $lib,
    'OAuthToken'      => $lib,
  );
}

/**
 * Implementation of hook_perm().
 */
function oauth_common_perm() {
  return array('oauth authorize consumers', 'oauth register consumers');
}

function oauth_common_menu() {
  $menu = array();

    $menu['oauth/authorize'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_oauth_common_authorize'),
      'access callback' => '_oauth_common_always_true',
      'file' => 'oauth_common.pages.inc',
      'type' => MENU_CALLBACK,
    );

    $menu['oauth/authorized'] = array(
      'title' => 'Authorization finished',
      'page callback' => '_oauth_common_authorized',
      'access callback' => '_oauth_common_always_true',
      'file' => 'oauth_common.pages.inc',
      'type' => MENU_CALLBACK,
    );

    $menu['oauth/request_token'] = array(
      'page callback' => '_oauth_common_request_token',
      'access callback' => '_oauth_common_always_true',
      'file' => 'oauth_common.pages.inc',
      'type' => MENU_CALLBACK,
    );

    $menu['oauth/access_token'] = array(
      'page callback' => '_oauth_common_access_token',
      'access callback' => '_oauth_common_always_true',
      'file' => 'oauth_common.pages.inc',
      'type' => MENU_CALLBACK,
    );

    $menu['user/%user/applications'] = array(
      'title' => 'Applications',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_oauth_common_user_applications', 1),
      'access callback' => '_oauth_common_user_access',
      'access arguments' => array(1, 'oauth register consumers'),
      'file' => 'oauth_common.pages.inc',
      'type' => MENU_LOCAL_TASK,
    );

    $menu['user/%user/applications/add'] = array(
      'title' => 'Add application',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_oauth_common_user_applications_add', 1),
      'access callback' => '_oauth_common_user_access',
      'access arguments' => array(1, 'oauth register consumers'),
      'file' => 'oauth_common.pages.inc',
      'type' => MENU_CALLBACK,
    );

    $menu['user/%user/applications/authorization/%'] = array(
      'title' => 'Edit authorization',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_oauth_common_user_authorization_edit', 1, 4),
      'access callback' => '_oauth_common_user_access',
      'access arguments' => array(1, 'oauth authorize consumers'),
      'file' => 'oauth_common.pages.inc',
      'type' => MENU_CALLBACK,
    );

    $menu['user/%user/applications/authorization/%/delete'] = array(
      'title' => 'Delete authorization',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_oauth_common_user_authorization_delete', 1, 4),
      // We always want to allow the user to delete a authorization, that 
      // shouldn't be a permission that can be rescinded.
      'access callback' => 'user_edit_access',
      'access arguments' => array(1),
      'file' => 'oauth_common.pages.inc',
      'type' => MENU_CALLBACK,
    );

  $menu['oauth/test/valid-consumer'] = array(
    'file' => 'oauth_common.pages.inc',
    'page callback' => '_oauth_common_validate_request_callback',
    'page arguments' => array('consumer'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $menu['oauth/test/valid-access-token'] = array(
    'file' => 'oauth_common.pages.inc',
    'page callback' => '_oauth_common_validate_request_callback',
    'page arguments' => array('access token'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Implementation of hook_user().
 */
function oauth_common_user($op, &$edit, &$account, $category = NULL) {
  global $user;

  if ($op == 'delete') {
    // Delete all tokens and consumers related to a user
    module_load_include('inc', 'oauth_common');
    $consumers = _oauth_common_user_consumer_info($account->uid);
    db_query('DELETE FROM {oauth_common_consumer}
      WHERE uid = %d', array(
        ':uid' => $account->uid,
      ));
    db_query("DELETE FROM {oauth_common_token}
      WHERE uid = %d OR consumer_key = '%s'", array(
        ':uid' => $account->uid,
        ':consumer_key' => $consumer->consumer_key,
      ));
  }
}

function _oauth_common_user_access($user, $permission) {
  return user_edit_access($user) && user_access($permission);
}

/**
 * This function is used as a access callback
 * when the authentication of the request shouldn't be
 * done by the menu system.
 *
 * @return bool
 *  Always returns TRUE
 */
function _oauth_common_always_true() {
  return TRUE;
}