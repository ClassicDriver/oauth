<?php

/**
 * Implementation hook_autoload_info().
 */
function oauth_common_autoload_info() {
  $lib = array('file' => 'lib/OAuth.php');

  return array(
    'DrupalOAuthServer'         => array('file' => 'includes/DrupalOAuthServer.inc'),
    'DrupalOAuthDataStore'      => array('file' => 'includes/DrupalOAuthDataStore.inc'),
    'DrupalOAuthRequest'        => array('file' => 'includes/DrupalOAuthRequest.inc'),
    'DrupalOAuthToken'          => array('file' => 'includes/DrupalOAuthToken.inc'),
    'DrupalOAuthConsumerToken'  => array('file' => 'includes/DrupalOAuthConsumerToken.inc'),
    'DrupalOAuthConsumer'       => array('file' => 'includes/DrupalOAuthConsumer.inc'),
    'OAuthSignatureMethod_HMAC' => array('file' => 'includes/OAuthSignatureMethod_HMAC.inc'),
    'DrupalOAuthClient'         => array('file' => 'includes/DrupalOAuthClient.inc'),
    'OAuthServer'     => $lib,
    'OAuthDataStore'  => $lib,
    'OAuthRequest'    => $lib,
    'OAuthConsumer'   => $lib,
    'OAuthToken'      => $lib,
  );
}

/**
 * Implementation of hook_enable().
 */
function services_oauth_enable() {
  // Flush the autoload caches so that our classes are registered
  autoload_flush_caches();
}

/**
 * Implementation of hook_theme().
 */
function oauth_common_theme() {
  return array(
    'oauth_common_context_list' => array(
      'template' => 'oauth_common_context_list',
      'arguments' => array(
        'contexts' => array(),
      ),
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function oauth_common_perm() {
  $permissions = array(
    'oauth authorize any consumers',
    'oauth register any consumers',
    'administer oauth',
  );

  // Add seperate permissions for creating and
  // authorizing consumers in each context.
  foreach(oauth_common_authorization_contexts() as $context => $levels) {
    $permissions[] = sprintf('oauth register consumers in %s', $context);
    $permissions[] = sprintf('oauth authorize consumers in %s', $context);
  }

  return $permissions;
}

/**
 * Implementation of hook_menu().
 */
function oauth_common_menu() {
  $menu = array();

  $menu['admin/settings/oauth'] = array(
    'title' => 'OAuth',
    'description' => 'Settings for OAuth',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_oauth_common_admin'),
    'access arguments' => array('administer oauth'),
    'file' => 'oauth_common.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['admin/settings/oauth/general'] = array_merge($menu['admin/settings/oauth'], array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ));

  $menu['admin/settings/oauth/contexts'] = array(
    'title' => 'Contexts',
    'description' => 'The different context for authorization',
    'page callback' => '_oauth_common_admin_contexts',
    'access arguments' => array('administer oauth'),
    'file' => 'oauth_common.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $menu['admin/settings/oauth/%/authorizations'] = array(
    'title' => 'Authorization levels',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_oauth_common_admin_authorization', 3),
    'access arguments' => array('administer oauth'),
    'file' => 'oauth_common.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['admin/settings/oauth/%/authorizations/%/delete'] = array(
    'title' => 'Delete/disable an authorization level',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_oauth_common_admin_authorization_delete', 3, 5),
    'access arguments' => array('administer oauth'),
    'file' => 'oauth_common.admin.inc',
    'type' => MENU_CALLBACK,
  );

  // OAuth doesn't need different endpoints for the different context as all
  // actions are done with a specific consumer, which in itself is associated
  // with a context.

  $menu['oauth/authorize'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_oauth_common_authorize'),
    'access callback' => '_oauth_common_always_true',
    'file' => 'oauth_common.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['oauth/authorized'] = array(
    'title' => 'Authorization finished',
    'page callback' => '_oauth_common_authorized',
    'access callback' => '_oauth_common_always_true',
    'file' => 'oauth_common.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['oauth/request_token'] = array(
    'page callback' => '_oauth_common_request_token',
    'access callback' => '_oauth_common_always_true',
    'file' => 'oauth_common.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['oauth/access_token'] = array(
    'page callback' => '_oauth_common_access_token',
    'access callback' => '_oauth_common_always_true',
    'file' => 'oauth_common.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['user/%user/applications'] = array(
    'title' => 'Applications',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_oauth_common_user_applications', 1),
    'access callback' => '_oauth_common_user_access',
    'access arguments' => array(1, 'oauth authorize consumers'),
    'file' => 'oauth_common.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $menu['user/%user/applications/add'] = array(
    'title' => 'Add application',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_oauth_common_user_applications_add', 1),
    'access callback' => '_oauth_common_user_access',
    'access arguments' => array(1, 'oauth register consumers'),
    'file' => 'oauth_common.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['user/%user/applications/authorization/%'] = array(
    'title' => 'Edit authorization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_oauth_common_user_authorization_edit', 1, 4),
    'access callback' => '_oauth_common_user_access',
    'access arguments' => array(1, 'oauth authorize consumers'),
    'file' => 'oauth_common.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['user/%user/applications/authorization/%/delete'] = array(
    'title' => 'Delete authorization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_oauth_common_user_authorization_delete', 1, 4),
    // We always want to allow the user to delete a authorization, that
    // shouldn't be a permission that can be rescinded.
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'file' => 'oauth_common.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['oauth/test/valid-consumer'] = array(
    'file' => 'oauth_common.pages.inc',
    'page callback' => '_oauth_common_validate_request_callback',
    'page arguments' => array('consumer'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $menu['oauth/test/valid-access-token'] = array(
    'file' => 'oauth_common.pages.inc',
    'page callback' => '_oauth_common_validate_request_callback',
    'page arguments' => array('access token'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Implementation of hook_cron().
 */
function oauth_common_cron() {
  db_query("DELETE FROM {oauth_common_token}
    WHERE expires!=0
    AND expires <= %d", array(
      ':now' => time(),
  ));
}

/**
 * Implementation of hook_user().
 */
function oauth_common_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'delete') {
    // Delete all tokens and consumers related to a user
    module_load_include('inc', 'oauth_common');
    $consumers = oauth_common_user_consumers($account->uid);
    db_query('DELETE FROM {oauth_common_consumer}
      WHERE uid = %d', array(
        ':uid' => $account->uid,
      ));
    db_query("DELETE FROM {oauth_common_token}
      WHERE uid = %d OR consumer_key = '%s'", array(
        ':uid' => $account->uid,
        ':consumer_key' => $consumer->consumer_key,
      ));
  }
}

/**
 * Implementation of hook_xrds().
 */
function services_oauth_xrds() {
  $xrds = array();
  $xrds['oauth'] = array(
    'services' => array(
      array(
        'data' => array(
          'Type' => array('http://oauth.net/discovery/1.0'),
          'URI' => array('#main'),
        ),
      ),
      array(
        'data' => array(
          'Type' => array(
            'http://oauth.net/core/1.0/endpoint/request',
            'http://oauth.net/core/1.0/parameters/auth-header',
            'http://oauth.net/core/1.0/parameters/uri-query',
            'http://oauth.net/core/1.0/signature/HMAC-SHA1',
          ),
          'URI' => array(url('oauth/request_token', array('absolute'=>TRUE))),
        ),
      ),
      array(
        'data' => array(
          'Type' => array(
            'http://oauth.net/core/1.0/endpoint/authorize',
            'http://oauth.net/core/1.0/parameters/uri-query',
          ),
          'URI' => array(url('oauth/authorize', array('absolute'=>TRUE))),
        ),
      ),
      array(
        'data' => array(
          'Type' => array(
            'http://oauth.net/core/1.0/endpoint/access',
            'http://oauth.net/core/1.0/parameters/auth-header',
            'http://oauth.net/core/1.0/parameters/uri-query',
            'http://oauth.net/core/1.0/signature/HMAC-SHA1',
          ),
          'URI' => array(url('oauth/access_token', array('absolute'=>TRUE))),
        ),
      ),
    ),
  );
  return $xrds;
}

/**
 * Access callback function used by several menu items.
 *
 * @param stdClass $user
 *  A user object.
 * @param string $permission
 *  The permission that is needed in addition to edit access on the $user.
 */
function _oauth_common_user_access($user, $permission) {
  return user_edit_access($user) && user_access($permission);
}

/**
 * This function is used as a access callback
 * when the authentication of the request shouldn't be
 * done by the menu system.
 *
 * @return bool
 *  Always returns TRUE
 */
function _oauth_common_always_true() {
  return TRUE;
}

/**
 * Gets tokens for stored on behalf of a consumer and user.
 *
 * This function returns a consumer token that has been stored for
 * accessing _other_ sites. That is when the site acts as a
 * consumer, not a provider.
 *
 * @param string $key
 *  The consumer key.
 * @return OAuthToken
 */
function oauth_common_get_consumer_token($key) {
  $res = db_query("SELECT secret
    FROM {oauth_common_consumer_token}
    WHERE token_key = '%s'", array(
      ':token_key' => $key,
    ));

  $token = nil;
  if ($secret = db_result($res)) {
    $token = OAuthToken($key, $secret);
  }
  return $token;
}

/**
 * Gets stored tokens for a consumer.
 *
 * @param string $consumer_key
 *  The key of the consumer to get tokens for.
 * @param string $type
 *  The token type: 'request' or 'access'.
 * @param string $provider_tokens
 *  Optional. Pass TRUE if provider tokens should be return, FALSE if consumer
 *  tokens should be returned. Defaults to TRUE.
 * @return array
 *  An array of DrupalOAuthToken objects.
 */
function oauth_common_get_tokens($consumer_key, $type='access', $provider_tokens=TRUE) {
  $res = db_query("SELECT *
    FROM {oauth_common_token}
    WHERE consumer_key = '%s'
    AND type = '%s',
    AND provider_token = %d", array(
      ':consumer_key' => $consumer_key,
      ':provider_token' => $provider_tokens,
    ));
  $tokens = array();
  while ($token = DrupalOAuthToken::fromResult($res)) {
    $tokens[] = $token;
  }
  return $tokens;
}

/**
 * Stores tokens for use when the site acts as a consumer.
 *
 * @param string $key
 *  The consumer key.
 * @param string $secret
 *  The consumer secret.
 * @param string $uid
 *  The user that this consumer key is stored on behalf of. Defaults to
 *  the currently logged in user.
 * @return void
 */
function oauth_common_write_consumer_token($key, $secret, $uid = NULL) {
  if ($uid === NULL) {
    global $user;
    $uid = $user->uid;
  }
  $exists = oauth_common_get_consumer_token($key);
  $update = $exists ? array('token_key') : NULL;
  $values = array(
    'token_key' => $key,
    'secret' => $secret,
    'uid' => $uid,
  );
  drupal_write_record('oauth_common_consumer_token', $values, $update);
}

/*
 * Returns all the the authorization contexts and their authorization levels.
 *
 * @return array
 */
function oauth_common_authorization_contexts() {
  static $contexts;
  if (!$contexts) {
    $contexts = module_invoke_all('oauth_default_contexts');

    // Load contexts from the database
    $res = db_query("SELECT * FROM {oauth_authorization_levels}");
    while ($level = db_fetch_object($res)) {
      $level->from_db = TRUE;
      $contexts[$level->context][$level->name] = $level;
    }

    foreach ($contexts as $context => $levels) {
      foreach ($levels as $name => $level) {
        // Make sure that all authorization levels are objects
        $level = (object)$level;

        // Enforce defaults
        $level->name = $name;
        if (!isset($level->enabled)) {
          $level->enabled = TRUE;
        }
        if (!isset($level->weight)) {
          $level->weight = 0;
        }

        $contexts[$context][$name] = $level;
      }
      uasort($contexts[$context], '_oauth_common_sort_authorization_levels');
    }
  }
  return $contexts;
}

/**
 * Compares the weight of authorization level objects. Authorization levels
 * without a weight are interpreted as having a weight of 0.
 *
 * @param object $a
 * @param object $b
 * @return int
 */
function _oauth_common_sort_authorization_levels($a, $b) {
  return (isset($a->weight) ? $a->weight : 0) - (isset($b->weight) ? $b->weight : 0);
}

/**
 * Returns the authorization levels for a context as an associative array
 * keyed after the machine readable name.
 *
 * @return array
 */
function oauth_common_authorization_levels($context='default') {
  $contexts = oauth_common_authorization_contexts();
  $levels = NULL;
  if (isset($contexts[$context])) {
    $levels = $contexts[$context];
  }
  return $levels;
}

/**
 * Creates a new authorization level.
 *
 * @param string $name
 *  The machine-readable name of the authorization level.
 * @param string $title
 *  The human-readable name of the authentication level.
 * @param string $description
 *  The description of the authentication level.
 * @param string $context
 *  The context the authorization is valid within.
 * @param int $weight
 *  The weight of the authorization level.
 * @param bool $enabled
 *  The enabled state of the authorization level.
 * @return void
 */
function oauth_common_write_authorization_level($name, $title, $description, $context='default', $weight=0, $enabled=TRUE) {
  $levels = oauth_common_authorization_levels($context);
  $update = NULL;
  if (isset($levels[$name]) && $levels[$name]->from_db) {
    $update = array('name', 'context');
  }
  $values = array(
    'name' => $name,
    'context' => $context,
    'title' => $title,
    'description' => $description,
    'weight' => $weight,
    'enabled' => $enabled,
  );

  drupal_write_record('oauth_authorization_levels', $values, $update);
}

/**
 * Deletes a authorization level
 *
 * @param string $name
 *  The machine-readable name of the authorization level.
 * @param string $context
 *  The context of the authorization level
 * @return void
 */
function oauth_common_delete_authorization_level($name, $context='default') {
  db_query("DELETE FROM {oauth_authorization_levels} WHERE name='%s'", array(
    ':name' => $name,
  ));
}